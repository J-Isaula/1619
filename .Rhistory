library(TTR)
library(quantmod)
library(quantmod)
df <- getSymbols('HNL=X',src='yahoo',
from= "2010-01-01",
to="2022-12-20",
auto.assign=FALSE)
df <- getSymbols('HNL=X',src='yahoo',
from= "2010-01-01",
to="2022-12-20",
auto.assign=FALSE)
head(df)
class(df)
xts_to_datframe<-function(data_xts){
df_t<-data.frame(fecha=(index(data_xts)),
value=coredata(data_xts))
colnames(df_t)<-c("ds", "y")
df_t
}
HNL <- xts_to_datframe(df$`HNL=X.Close`)
class(HNL)
library(plotly)
library(plotly)
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dats)
}
accumulate_by <- function(dat, var) {
var <- lazyeval::f_eval(var, dat)
lvls <- plotly:::getLevels(var)
dats <- lapply(seq_along(lvls), function(x) {
cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
})
dplyr::bind_rows(dat)
}
library(tidyverse)
library(tidyverse)
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Año',
y = 'HNL',
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Fecha',
y = 'HNL',
caption = 'Elaboración propia con datos de yahoo finance')
library(tidyverse)
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Fecha',
y = 'HNL',
caption = 'Elaboración propia con datos de yahoo finance')
HNL
class(HNL)
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Año',
y = 'HNL',
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
xlab = 'Año',
ylab = 'HNL',
library(ggplot2)
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
xlab = 'Año',
ylab = 'HNL'
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Ano',
y = 'HNL'
caption = 'Elaboración propia con datos de yahoo finance')
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Ano',
y = 'HNL',
caption = 'Elaboración propia con datos de yahoo finance')
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Ano',
y = 'HNL',
caption = 'Elaboracion propia con datos de yahoo finance')
HNL %>% ggplot(aes(x = ds, y = y))+
geom_line()+
theme_minimal()+
labs(title = 'Datos Historicos del Tipo de Cambio del USD/HNL',
subtitle = '2010 - 2022',
x = 'Fecha',
y = 'HNL',
caption = 'Elaboracion propia con datos de yahoo finance')
library(prophet)
library(prophet)
m <- prophet(HNL,daily.seasonality = TRUE)
future <- make_future_dataframe(m,periods = 3,freq = 'day')
tail(future)
forecast <- predict(m, future)
forecast <- predict(m, future)
``
forecast <- predict(m, future)
forecast
dyplot.prophet(m, forecast)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
prophet_plot_components(m,forecast)
library(tidyverse)
library(gapminder)
library(dslabs)
library(broom)
library(tidyverse)
library(gapminder)
library(dslabs)
library(broom)
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE,
fig.path='figs/',
cache.path = '_cache/',
fig.process = function(x) {
x2 = sub('-\\d+([.][a-z]+)$', '\\1', x)
if (file.rename(x, x2)) x2 else x
})
gapminder
tail(gapminder)
gap_anidado <- gapminder %>% group_by(country) %>% nest()
gap_anidado
head(gap_anidado)
gapminder
gapminder %>% str()
gap_models <- gap_anidado %>%
mutate(model = map(data, ~lm(life_expectancy~year,data = .x)))
gap_models
tidy(gap_models$model[[1]])
tidy(gap_models$model[[2]])
tidy(gap_models$model[[1]])
gap_models %>%
mutate(coef = map(model, ~tidy(.x))) %>%
unnest(coef)
model_perf <- gap_models %>%
mutate(coef = map(model,~glance(.x))) %>%
unnest(coef)
model_perf
model_perf %>% slice_max(r.squared)
model_perf %>% slice_max(.,r.squared)
slice_max(model_perf, order_by = r.squared)
mejores_models <- model_perf %>% filter(r.squared > 0.995)
mejores_models
peores_modelos <- model_perf %>% filter(r.squared < 0.002)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.001)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.0001)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.0002)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.003)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.5)
peores_modelos
peores_modelos <- model_perf %>% filter(r.squared < 0.3)
peores_modelos
model_perf %>% slice_max(r.squared, n=4)
augment_models <- gap_models %>%
mutate(augmented = map(model,~augment(.x))) %>%
unnest(augmented)
augment_models
augment_models %>% filter(country == "Bahamas") %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_point() +
geom_line(aes(y = .fitted), color = "red") +
labs(title = "Modelo Regresión Lineal para Bahamas",
x = "Año",
y = "Esperanza de Vida") +
theme_classic()
augment_models %>% filter(country == "Bahamas") %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_point() +
geom_line(aes(y = .fitted), color = "red") +
labs(title = "Modelo Regresión Lineal para Bahamas",
x = "Año",
y = "Esperanza de Vida") +
theme_minimal()
augment_models %>% filter(country == "Ukraine") %>%
ggplot(aes(x = year, y = life_expectancy)) +
geom_point() +
geom_line(aes(y = .fitted), color = "red") +
labs(title = "Modelo de Regresión Lineal para Ukraine",
x = "Año",
y = "Esperanza de  Vida") +
theme_minimal()
best_augment <- mejores_models %>%
mutate(augmented = map(model, ~augment(.x))) %>%
unnest(augmented)
peores_augment <- peores_modelos %>%
mutate(augmented = map(model, ~augment(.x))) %>%
unnest(augmented)
mejores_augment <- mejores_models %>%
mutate(augmented = map(model, ~augment(.x))) %>%
unnest(augmented)
peores_augment <- peores_modelos %>%
mutate(augmented = map(model, ~augment(.x))) %>%
unnest(augmented)
mejores_augment %>%
ggplot(aes(x = year)) +
geom_point(aes(y = .life_expectancy)) +
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
mejores_augment %>% str()
mejores_augment
mejores_augment %>%
ggplot(aes(x = year)) +
geom_point(aes(y = life_expectancy)) +
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
peores_augment %>%
ggplot(aes(y = life_expectancy)) +
geeom_point(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
peores_augment %>%
ggplot(aes(y = life_expectancy)) +
geom_point(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
peores_augment %>%
ggplot(aes(y = year)) +
geom_point(aes(y = life_expectancy))+
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
peores_augment %>%
ggplot(aes(x = year)) +
geom_point(aes(y = life_expectancy)) +
geom_line(aes(y = .fitted), color = "red") +
facet_wrap(~country, scales = "free_y") +
theme_minimal()
peores_augment
gap_fullmodel <- gap_anidado %>%
mutate(model = map(data,
~lm(life_expectancy~year+population+fertility+gdp, data = .x)))
fullmodel_perf <- gap_fullmodel %>%
# Extraigaimos las estadísticas de ajuste de cada modelo en marcos de datos
mutate(fit = map(model, ~glance(.x))) %>%
# Simplifiquemos los marcos de datos de ajuste para cada modelo
unnest(fit)
# Vea el rendimiento de los 2 países con el peor ajuste, es decir,
# los dos modelos simples que viste antes
fullmodel_perf %>%
filter(country %in% peores_modelos$country) %>%
select(country, adj.r.squared)
reticulate::repl_python()
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("C:/Usersjuan.isaula/Desktop/candy-production-master/candy_production.csv", index_col = "fecha", parse_date = True)
df = pd.read_csv("C:/Usersjuan.isaula/Desktop/candy-production-master/candy_production.csv", index_col = "fecha", parse_dates = True)
df = pd.read_csv("C:\Users\juan.isaula\Desktop\candy-production-master\candy_production.csv", index_col = "fecha", parse_dates = True)
df = pd.read_csv("C:\Users\juan.isaula\Desktop\candy-production-master\candy_production.csv")
df = pd.read_csv("C:/Users/juan.isaula/Desktop/candy-production-master/candy_production.csv")
df
df = pd.read_csv("C:/Users/juan.isaula/Desktop/candy-production-master/candy_production.csv",index_col = "fecha")
df
df = pd.read_csv("C:/Users/juan.isaula/Desktop/candy-production-master/candy_production.csv",index_col = "fecha", parse_dates = True)
df
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("candy_production.csv",index_col = "fecha", parse_dates = True)
df
install.packages(astsa)
install.packages("astsa")
options("install.lock"=FALSE)
install.packages("astsa")
library(astsa)
library(astsa)
jj
plot(jj, main = "Ganancias Trimestrales por Acción de Johnson & Johnson", type = "c")
text(jj, labels = 1:4, col = 1:4)
library(astsa)
plot(jj, main = "Ganancias Trimestrales por Acción de Johnson & Johnson", type = "c")
text(jj, labels = 1:4, col = 1:4)
library(astsa)
plot(jj, main = "Ganancias Trimestrales por Acción de Johnson & Johnson")
text(jj, labels = 1:4, col = 1:4)
library(astsa)
plot(jj, main = "Ganancias Trimestrales por Acción de Johnson & Johnson")
text(jj, labels = 1:4, col = 1:4)
library(astsa)
plot(jj, main = "Ganancias Trimestrales por Acción de Johnson & Johnson",type = "c")
text(jj, labels = 1:4, col = 1:4)
plot(globtemp, main = "Desviaciones de Temperatura Global",type = "o")
library(xts)
library(lifecontingencies)
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE,
fig.path='figs/',
cache.path = '_cache/',
fig.process = function(x) {
x2 = sub('-\\d+([.][a-z]+)$', '\\1', x)
if (file.rename(x, x2)) x2 else x
})
library(lifecontingencies)
A <- 500*annuity(i = 0.08, n = 4, type = "inmediate")
A <- 500*annuity(i = 0.08, n = 4, type = "immediate")
A
A <- 100*annuity(i = 0.09, n = 5, type = "immediate")
A
8000*annuity(i = 0.15, n = 5, type = "due")
1200*accumulatedValue(i = 0.05, n = 10, type = "due")
180000/accumulatedValue(i = 0.05, n = 12, type = "immediate")
4240*annuity(i = 0.015, n = 24, type = "immediate")
4240*annuity(i = 0.015, n = 24, m = 4,  type = "immediate")
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE,
fig.path='figs/',
cache.path = '_cache/',
fig.process = function(x) {
x2 = sub('-\\d+([.][a-z]+)$', '\\1', x)
if (file.rename(x, x2)) x2 else x
})
TMS <- function(fun.utilidad, bien_x) {
U  <- parse(text = fun.utilidad)
v1 <- D(U, "x")                       # D() función que realiza la derivada de U
print(paste("TMS = ",
eval(v1, envir = list(x = bien_x)), "considerando",
bien_x, "unidades del bien x"))
}
TMS(fun.utilidad = "100/x", 5)
w <- c()
w
w(1)
Var_TMS <- function(fun.utilidad, bien_x){
U  <- parse(text = fun.utilidad)
v1 <- D(U, "x")
eval(v1, envir = list(x = bien_x))
}
w <- c()
w
w <- c()
for (i in seq(60, 10, -10)){
t <- Var_TMS(fun.utilidad = "100/x",i)
w <- c(w,t)
}
w
file.edit("~/.Renviron")
install.packages("usethis")
options("install.lock"=FALSE)
install.packages("usethis")
usethis::use_github()
usethis::use_github()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
usethis::use_github()
library(usethis)
use_git_config(user.name = "Juan Isaula", user.mail = "juanisaula487@gmail.com")
