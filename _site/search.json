[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "J.Isaula",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nMicroeconomía Intermedia con R\n\n\nCurvas de Indiferencia\n\n\n\n\nEconomía\n\n\nMicroeconomía\n\n\nR\n\n\nRStudio\n\n\n\n\n\n\n\n\n\n\n\nJan 9, 2023\n\n\nJuan Isaula\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "J.Isaula",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Microeconomía Intermedia con R",
    "section": "",
    "text": "Una forma de iniciar el análisis de los individuos es plantear un conjunto básico de postulados, o axiomas, que describen el comportamiento racional del mismo. Supondremos que dadas tres canastas de consumo cualesquiera \\((x_1,x_2)\\), \\((y_1,y_2)\\) y \\((z_1,z_2)\\). El consumidor puede ordenarlas según su atractivo. Es decir, puede decidir que una de ellas es estrictamente mejor que la otra o bien que le son indiferentes.\nUtilizaremos la notación:\n\n\\(\\succ\\) Para indicar que una canasta se prefiere estrictamente a otra, es decir, \\((x_1,x_2) \\succ (y_1,y_2)\\).\n\\(\\sim\\) Para indicar que al consumidor le resulta indiferente elegir una u otra de las dos canastas de bienes y lo representamos matemáticamente como \\((x_1,x_2)\\sim (y_1,y_2)\\).\n\\(\\succeq\\) Para indicar si el individuo prefiere una de las dos canastas o es indiferente entre ellas, decimos que prefiere debilmente la canasta \\((x_1,x_2)\\) a la \\((y_1,y_2)\\) y escribimos \\((x_1,x_2)\\succeq (y_1,y_2)\\).\n\n\n\nCon base en lo anterior, ya estamos preparados para conocer los tres axiomas de la teoría del consumidor. Decimos que las preferencias son:\n\nCompletas: suponemos que es posible comprar dos canastas cualesquiera, es decir, dada cualquier canasta \\(\\textbf{X}\\) y cualquier canasrta \\(\\textbf{Y}\\), suponemos que \\((x_1,x_2)\\succeq (y_1,y_2)\\) o \\((y_1,y_2) \\succeq (x_1,x_2)\\) o las dos cosas, en cuyo caso el consumidor es indiferente entre las dos canastas.\nReflexivas: suponemos que cualquier canasta es al menos tan buena como ella misma: \\((x_1,x_2)\\succeq (y_1,y_2)\\).\nTransitiva: si \\((x_1,x_2)\\succeq (y_1,y_2)\\) y \\((y_1,y_2)\\succeq (z_1,z_2) \\Longrightarrow (x_1,x_2)\\succeq (z_1,z_2)\\). Es decir, si el consumidor piensa que la canasta \\(\\textbf{X}\\) es al menos tan buena como la \\(\\textbf{Y}\\) y que la \\(\\textbf{Y}\\) es al menos tan buena como la \\(\\textbf{Z}\\), piensa que la \\(\\textbf{X}\\) es al menos tan buena como la \\(\\textbf{Z}\\).\n\nConsidere que cuando nos referimos a las canastas \\(\\textbf{X}, \\textbf{Y}\\) o \\(\\textbf{Z}\\) estamos haciendo referencia a:\n\n\\(\\textbf{X} = (x_1,x_2)\\)\n\\(\\textbf{Y} = (y_1.y_2)\\)\n\\(\\textbf{Z} = (z_1,z_2)\\)\n\nSi las preferencias no fueran transitivas, podría muy bien haber un conjunto de canastas tal que ninguna de las elecciones fuera la mejor. Sin embargo, en el curso de microeconomía II estamos trabajando bajo el modelo tradicional, donde asumimos que el individuo es razonal, tomando en cuenta que siempre va a preferir mas que menos.\n\n\n\nEl primer axioma, la completitud, es dificilmente criticable, al menos en el caso de los tipos de elecciones que suelen analizar los economistas. Decir que pueden compararse dos canastas cualesquiera es decir simplemente que el consumidor es capaz de elegir entre dos canasas cualesquiera.\nEl segundo axioma, la reflexividad, plantea más problemas. Una canasta cualquiera es ciertamente tan buena como una canasta idéntica.\nEl tercer axioma, la transitividad, plantea más problemas. No esta claro que las preferencias deban tener necesariamente esta propiedad. El supuesto de que son transitivas no parece evidente desde un punto de vista puramente lógico, y, de hecho, no lo es. La transitividad es una hipótesis sobre la conducta de los individuos en sus elecciones y no una afirmación lógica. Sin embargo, no importa que sea o no un hecho lógico básico; lo que importa es que sea o no una descripción razonablemente exacta del comportamiento de los individuos.\n¿Qué pensarías de una persona que dijera que prefiere la canasta \\(\\textbf{X}\\) a la \\(\\textbf{Y}\\) y la \\(\\textbf{Y}\\) a la \\(\\textbf{Z}\\), pero que también dijera que prefiere la \\(\\textbf{Z}\\) a la \\(\\textbf{X}\\)? Desde luego, lo consideraríamos como prueba de una conducta particular. Y lo que es más importante, ¿Cómo se comportaría este consumidor si tuviera que elegir entre las tres canastas \\(\\textbf{X}, \\textbf{Y}\\) y \\(\\textbf{Z}\\)?"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html#red-recurrente-bayesiana-lstm",
    "href": "posts/post-with-code/index.html#red-recurrente-bayesiana-lstm",
    "title": "BLiTZ-LSTM Bayesiano para cuantificación de Incertidumbre",
    "section": "Red Recurrente Bayesiana LSTM",
    "text": "Red Recurrente Bayesiana LSTM\nComo sabemos, la arquitectura LSTM se diseño para atacar el problema de fuga de información que ocurre cuando se utilizan redes neuronales recurrentes estándar para procesar datos de secuencias largas.\nLa arquitectura LSTM se traduce matematicamente a:\n\\[\n\\begin{eqnarray*}\nf_t &=& \\sigma_g(W_fx_t + U_fh_{t-1} + b_f)\\\\\ni_t &=& \\sigma_g(W_ix_t + U_ih_{t-1} + b_i)\\\\\no_t &=& \\sigma_g(W_ox_t + U_oh_{t-1} + b_0)\\\\\nc^\\prime_t &=& \\sigma_c(W_cx_t + U_ch_{t-1} + b_c)\\\\\nc_t &=& f_t \\odot c_{t-1} + i_t\\odot c^\\prime_t\\\\\nh_t &=& o_t \\odot \\sigma_h(c_t)\n\\end{eqnarray*}\n\\]\nDonde los valores iniciales son \\(c_0 = 0\\) y \\(h_0 = 0\\) y el operador \\(\\odot\\) denota el producto de Hadamard (producto por elemento). El subindice \\(t\\) indexa el paso de tiempo."
  },
  {
    "objectID": "posts/post-with-code/index.html#blitz",
    "href": "posts/post-with-code/index.html#blitz",
    "title": "BLiTZ-LSTM Bayesiano para cuantificación de Incertidumbre",
    "section": "BLiTZ",
    "text": "BLiTZ\nPretendemos conocer BLiTZ, es una biblioteca simple y eccesible para crear capas de redes neuranales bayesianas (basadas en lo que propone en el documento Weight Uncertainty in Neural Networks) en PyTorch. Al usar capas y utilidades BLiTZ, puede agregar incertidumbre y recopilar el costo de complejidad de su modelo de una manera simple que no afecta la interacción entre sus capas, como si estuviera usando PyTorch de manera estándar.\nMediante el uso de nuestras clases de muestreo de peso central, puede ampliar y mejorar esta biblioteca para agregar incertidumbre a un mayor alcance de capas, como la hará de una manera bien integrada a PyTorch. También son bienvenidas las solicitudes de extracción."
  },
  {
    "objectID": "posts/post-with-code/index.html#propósito-de-las-capas-bayesianas",
    "href": "posts/post-with-code/index.html#propósito-de-las-capas-bayesianas",
    "title": "BLiTZ-LSTM Bayesiano para cuantificación de Incertidumbre",
    "section": "Propósito de las Capas Bayesianas",
    "text": "Propósito de las Capas Bayesianas\nComo sabemos, en capas de redes neuronales deterministas (no bayesianas), los parametros entrenables corresponden directamente a los pesos utilizados en su transformación lineal (o la entrada, si es el caso). En el caso Bayesiano, estos corresponden a la siguiente cuación\n\\[\na^{(i+1)} = W^{(i+1)}.z^{(i)} + b^{(i+1)}\n\\]\ndonde \\(z\\) corresponde a la salida activa de la capa \\(i\\).\nLas capas bayesianas buscan introducir incertidumbre en sus pesos muestreándolas a partir a partir de de una distribución parametrizada por variables entrenables en cada operación de avance.\nEsto nos permite no solo optimizar las métricas de rendimiento del modelo, si no también recopilar la incertidumbre de las predicciones de la red sobre un punto de datos específico (muestreandolo muchas veces y midiendo la dispersión) y con el objetivo de reducir tanto como sea posible la varianza de la red sobre la predicción, haciendo posible saber cuánta incertidumbre nos queda sobre la etiqueta si tratamos de modelarla en función de nuestro datapoint específico."
  },
  {
    "objectID": "posts/post-with-code/index.html#muestreo-de-peso-en-capas-bayesianas",
    "href": "posts/post-with-code/index.html#muestreo-de-peso-en-capas-bayesianas",
    "title": "BLiTZ-LSTM Bayesiano para cuantificación de Incertidumbre",
    "section": "Muestreo de peso en capas bayesianas",
    "text": "Muestreo de peso en capas bayesianas\nPara ello en cada operación feedforward muestreamos los parametros de la transformación lineal con las siguientes ecuaciones (donde \\(\\rho\\) parametriza la desviación estándar y \\(\\mu\\) parametriza la media de los parámetros de transformación lineal de las muestras):\n\\[\nW_{(n)}^{(i)} = N(0,1)*\\log(1 + \\rho^{(i)}) + \\mu^{(i)}\n\\]\naquí \\(W\\) muestreado corresponde a los pesos utilizados en la transformación lineal para la e-ésima capa en la n-ésima muestra.\nPara los sesgos:\n\\[\nb_{(n)}^{(i)} = N(0,1)*\\log(1+\\rho^{(i)}) + \\mu^{(i)}\n\\]\ndonde \\(b\\) muestreado corresponde a los sesgos utilizados en la transformación lineal para la i-ésima capa en la n-ésima muestra\nQuizás se te haga abrumador pensar como iterar todo esto, sin embargo, BLiTZ tiene una capa Bayesiana LSTM incorporada que hace todo este trabajo duro por usted, por lo que solo tiene que preocuparse por la arquitectura de su red y los bucles de entrenamiento/prueba.\nSi quieres saber más al respecto del aprendizaje profundo bayesiano te sugiero revises ek siguiente artículo Charles Blundell, Julien Cornebise, Koray Kavukcuoglu, Daan Wierstra. Weight Uncertainty in Neural Networks."
  },
  {
    "objectID": "posts/post-with-code/index.html#ejemplo",
    "href": "posts/post-with-code/index.html#ejemplo",
    "title": "BLiTZ-LSTM Bayesiano para cuantificación de Incertidumbre",
    "section": "Ejemplo",
    "text": "Ejemplo\nPara este ejemplo utilizaremos los datos del tipo de cambio Hondureño frente al dolar (USD/HNL) los datos los puedes ver y descargar de YahooFinance!. Además de nuestras importaciones comunes, estaremos importando BayesianLSTM() y variational_estimator con blitz.modules y blitz.utils respectivamente.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/post-with-code/index.html#curvas-de-indiferencia",
    "href": "posts/post-with-code/index.html#curvas-de-indiferencia",
    "title": "Microeconomía Intermedia con R",
    "section": "Curvas de Indiferencia",
    "text": "Curvas de Indiferencia\nCon base en la definición previa de utilidad, podemos concluir, una función de utilidad es la que explica la cantidad de utilidad que posee un consumidor dado su consumo de dos bienes diferentes. \\(x, y\\). Una curva de indiferencia es solo una rebanada infenitesimal de esa función que describe todas las diferentes combinaciones entre dos bienes que producen la misma cantidad de utilidad (es decir, a la que una persona sería indiferente).\nSupongamos que una persona clasifica las hamburguesas \\((y)\\) y las bebidas \\((x)\\) de acuerdo con la función de utilidad\n\\[\nU(x,y) = \\sqrt{xy}\n\\]\nEn el caso de esta función, obtenemos la curva de indiferencia identificando un conjunto de combinaciones de \\(x,y\\) en el cual la utilidad tiene el mismo valor. Suponga que arbitrariamente decimos que la utilidad tiene un valor de 10. Entonces, la ecuación de esta curva sera:\n\\[\nU(x,y) = 10 = \\sqrt{xy}\n\\]Note que si elevamos esta función al cuadrado se mantiene el mismo orden, por lo cual también podemos representar esta curva de indiferencia como\n\\[\n100 = xy\n\\]\nEs importante siempre despejar este tipo de ecuaciones para \\(y\\) la importancia esta en que será mucho más facil posteriormente encontrar su tasa marginal de sustitución ( en otra sección de esta publicación estudiaremos a detalle esto), entonces, al despejar obtenemos:\n\\[\ny = \\frac{100}{x}\n\\]\nPara trazar su curva de indiferencia, lo haremos en R , a continuación les muestro como hacerlo. Puedes realizar este ejercicio en tu PC tu mismo.\n\n# 1. Primero cargamos las librerias que utilizaremos, en caso que nos las tengas \n#    instaladas sugiero lo hagas usando install.package(\"libreria\") en su consola\n#    de Rstudio.\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.5.0 \n✔ readr   2.1.2      ✔ forcats 0.5.1 \n✔ purrr   0.3.5      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# 2. Creamos la función de utilidad del ejemplo \nutilidad <- function(x,y){\n  sqrt(x*y) \n}\n\n# 3. Creamos una matriz para hacer un bucle en la función de utilidad\nvalores_matriz <- matrix(0,nrow = 200, ncol = 200)\n\n# 3.1 Llenamos la matriz con usando la función de utilidad \nfor(fila in 1:nrow(valores_matriz)){\n  for(columna in 1:ncol(valores_matriz)){\n    valores_matriz[fila,columna] <- utilidad(fila,columna)\n  }\n}\n\n# 4. Función que nos permitira graficar las curvas de indiferencia \n\nC_indiferencia <- function(entrada_utilidad){\n  y <- c()\n  \n  for(i in 1:50){\n    y_coord <- entrada_utilidad^2/i\n    y       <- c(y,y_coord)\n  }\n  \n  data <- data.frame(\n    x = 1:50,\n    y = y,\n    z = rep(entrada_utilidad,50)\n  )\n  \n  return(data)\n}\n\n\n# 4.1 Resultado de utilidades obtenidas \nlista_utilidades <- lapply(10, C_indiferencia)\n\nfull_df <- do.call(rbind, lista_utilidades)\n\nAhora si ya estamos preparados para graficar nuestras curvas de indiferencia para \\(10 = \\sqrt{xy}\\)\n\n# 5. Gráfico\n\nggplot() + \n  geom_point(data = full_df, aes(x = x, y = y, color = z)) + \n  geom_path(data = full_df, aes(x = x, y = y, color = z)) +\n  theme_minimal()+\n  ylim(0,100) + \n  labs(x = \"Bebidad\", y = \"Hamburguesas\") + \n  scale_color_continuous(name = \"Utilidad\")\n\n\n\n\nNote que la curva previa representa una utilidad = 10.\nA continuación te muestro un grafico animado de la curva de indiferencia previa. Para generar el gráfico presiona el boton PLAY.\n\n\n\n\n\n\nVeamos que sucede cuando tenemos diferentes niveles de utilidad, en base al resultado usted puede deducir su propio análisis.\n\nutilidad <- function(x,y){\n  sqrt(x*y) \n}\n\nvalores_matriz <- matrix(0,nrow = 200, ncol = 200)\n\nfor(fila in 1:nrow(valores_matriz)){\n  for(columna in 1:ncol(valores_matriz)){\n    valores_matriz[fila,columna] <- utilidad(fila,columna)\n  }\n}\n\nC_indiferencia <- function(entrada_utilidad){\n  y <- c()\n  \n  for(i in 1:100){\n    y_coord <- entrada_utilidad^2/i\n    y       <- c(y,y_coord)\n  }\n  \n  data <- data.frame(\n    x = 1:100,\n    y = y,\n    z = rep(entrada_utilidad,100)\n  )\n  \n  return(data)\n}\n\nlista_utilidades <- lapply(seq(from =10, to = 60, by = 10), C_indiferencia)\n\nfull_df <- do.call(rbind, lista_utilidades)\n\n\nggplot() +\n  geom_point(data = full_df, aes(x = x, y = y, color = z)) +\n  geom_path(data = full_df, aes(x = x, y = y, color = z)) +\n  theme_minimal() +\n  ylim(0,200) +\n  labs(x = \"Bebidas\", y = \"Hamburguesas\") +\n  scale_color_continuous(name = \"Utilidad\")\n\nWarning: Removed 41 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAquí podemos señalar lo siguiente:\n\nA medida que aumenta la utilidad, las curvas se desplazan hacia la derecha y hacia la izquierda a medida que disminuye la utilidad.\nObserve que las curvas se inclinan hacia abajo, esto debe ser necesariamente el caso; a medida que uno aumenta su consumo de bebidas renuncia al otro bien que les era indiferente, hamburguesa.\nTodo lo que está debajo de la curva representa paquetes con menos utilidad. La teoría de la utilidad asume que un consumidor siempre buscará maximizar la utilidad.\nComprende que la pendiente no es lineal. En genera, cuanto más se tiene de algo, menos utilidad se obtendrá de otra unidad y, por el contrario, más se renunciaría a adquirir el otro bien. Esta pendiente tiene un nombre oficial: Tasa Marginal de Sustitución o TMS hablaremos de esto en una sección posterior.\n\nPero esas son solo algunas rebanadas que ya he señalado como infinitesimalmente pequeñas.\nPara concluir esta sección te dejo un gráfico animado de los diferentes niveles de utilidad, por favor presiona el boton PLAY para que logres verlo."
  },
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "J.Isaula",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nMicroeconomía Intermedia con R\n\n\nCurvas de Indiferencia\n\n\n\n\nEconomía\n\n\nMicroeconomía\n\n\nR\n\n\nRStudio\n\n\n\n\n\n\n\n\n\n\n\nJan 9, 2023\n\n\nJuan Isaula\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "J.Isaula",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nMicroeconomía Intermedia con R\n\n\nCurvas de Indiferencia\n\n\n\n\nEconomía\n\n\nMicroeconomía\n\n\nR\n\n\nRStudio\n\n\n\n\n\n\n\n\n\n\n\nJan 9, 2023\n\n\nJuan Isaula\n\n\n\n\n\n\nNo matching items"
  }
]